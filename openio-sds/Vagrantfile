# -*- mode: ruby -*-
# vi: set ft=ruby :


Vagrant.configure(2) do |config|

  # Gloval env variables
  PROFILE = ENV['OIO_PROFILE'] || 'vagrant'
  abort "Unsupported OpenIO profile #{PROFILE}. Aborting." unless ['vagrant','vagrant-ext','vagrant-ext-space','vagrant-ext-swift','vagrant-ext-cyrus'].include?(PROFILE)
  VAGRANT_PROVIDER = ENV['VAGRANT_PROVIDER'] || 'virtualbox'
  abort "Unsupported provider #{VAGRANT_PROVIDER}. Aborting." unless ['virtualbox','openstack','aws'].include?(VAGRANT_PROVIDER)
  subprofile = PROFILE.sub('vagrant','')
  openio_mirror = ENV['OIO_MIRROR'] || 'http://mirror.openio.io/pub/repo/openio/sds'
  nbinstances = ENV['OIO_INSTANCENB'] || 0
  add_repo = ENV['ADD_REPO'] || nil
  openio_release = ENV['OIO_RELEASE'] || nil
  openio_sds_ipaddr = ''
  VM_MAIN_SNAME = 'OpenIO-SDS'
  vm_sname = "#{VM_MAIN_SNAME}#{subprofile}"

  # Global box configuration
  config.vm.box  = "openio/sds#{subprofile}"
  config.ssh.pty = true
  config.vm.synced_folder '.', '/var/lib/oio/vagrant', disabled: true

  # VirtualBox
  if VAGRANT_PROVIDER == 'virtualbox'
    puts 'Using the virtualbox provider ...'
    config.vm.network "private_network", :type => 'dhcp', :adapter => 2
    # use "openio" as default user instead of "vagrant"
    config.ssh.username = "openio"

    if PROFILE.include?('vagrant-ext')
      # Setting up an extension box
      # Get OpenIO-SDS IPs
      res = `VBoxManage guestproperty get #{VM_MAIN_SNAME} /VirtualBox/GuestInfo/Net/1/V4/IP`
      if $? != 0
        abort "Failed to get #{VM_MAIN_SNAME} VM IP address."
      end
      # Get the ipaddr
      openio_sds_ipaddr = res.split[1]
      # Get the number of OpenIO-SDS-ext vms
      nbinstances = `VBoxManage list vms | grep -c #{vm_sname}`
      nbinstances = nbinstances.to_i + 1
      vm_sname = "#{vm_sname}-#{nbinstances}"
    end
  end
  config.vm.provider :virtualbox do |virtualbox|
    virtualbox.gui = true
    virtualbox.name = "#{vm_sname}"
    virtualbox.cpus = "1"
    virtualbox.memory = "1536"
  end

  # OpenStack
  if VAGRANT_PROVIDER == 'openstack'
    puts 'Using the openstack provider ...'
    if PROFILE.include?('vagrant-ext') and (! ENV['OIO_MAIN_IPADDR'] or ! ENV['OIO_INSTANCENB'])
      abort 'OpenStack provider requires OIO_MAIN_IPADDR and OIO_INSTANCENB environment variable.'
    elsif PROFILE.include?('vagrant-ext')
      openio_sds_ipaddr = ENV['OIO_MAIN_IPADDR']
      instancenb = ENV['OIO_INSTANCENB']
      vm_sname = "#{vm_sname}-#{instancenb}"
    end
  end
  config.vm.provider :openstack do |os,override|
    os.server_name                = "#{vm_sname}"
    os.openstack_auth_url         = ENV['OS_OPENSTACK_AUTH_URL']
    os.username                   = ENV['OS_USERNAME']
    os.password                   = ENV['OS_PASSWORD']
    os.tenant_name                = ENV['OS_TENANT_NAME']
    os.flavor                     = ENV['OS_FLAVOR'] || 'm1.small'
    os.image                      = ENV['OS_IMAGE'] || 'CentOS-7-x86_64-GenericCloud'
    os.floating_ip_pool           = ENV['OS_FLOATING_IP_POOL'] || []
    os.networks                   = ENV['OS_NETWORKS'] || []
    os.keypair_name               = ENV['OS_KEYPAIR']
    os.sync_method                = ENV['OS_SYNC_METHOD'] || 'none'
    os.server_name                = ENV['OS_SERVER_NAME'] || "#{vm_sname}"
    override.ssh.private_key_path = ENV['OS_SSH_PRIVATE_KEY_PATH'] || '~/.ssh/id_rsa'
    override.ssh.username         = ENV['OS_SSH_USERNAME'] || 'centos'
    override.ssh.insert_key       = ENV['OS_SSH_INSERT_KEY'] || true
  end

  # AWS
  if VAGRANT_PROVIDER == 'aws'
    puts 'Using the AWS provider ...'
    if PROFILE.include?('vagrant-ext') and (! ENV['OIO_MAIN_IPADDR'] or ! ENV['OIO_INSTANCENB'])
      abort 'AWS provider requires OIO_MAIN_IPADDR and OIO_INSTANCENB environment variable.'
    elsif PROFILE.include?('vagrant-ext')
      openio_sds_ipaddr = ENV['OIO_MAIN_IPADDR']
      instancenb = ENV['OIO_INSTANCENB']
      vm_sname = "#{vm_sname}-#{instancenb}"
    end
  end
  config.vm.provider :aws do |aws, override|
    aws.tags["Name"]              = "#{vm_sname}"
    aws.access_key_id             = ENV['AWS_ACCESS_KEY_ID']
    aws.secret_access_key         = ENV['AWS_SECRET_ACCESS_KEY']
    aws.keypair_name              = ENV['AWS_KEYPAIR']
    aws.region                    = ENV['AWS_REGION'] || 'eu-central-1'
    aws.ami                       = ENV['AWS_AMI'] || 'ami-e68f82fb'
    aws.availability_zone         = ENV['AWS_AVAILABILITY_ZONE'] || 'eu-central-1a'
    aws.instance_type             = ENV['AWS_INSTANCE_TYPE'] || 't2.micro'
    aws.security_groups           = ENV['AWS_SECURITY_GROUPS']
    aws.associate_public_ip       = ENV['AWS_ASSOCIATE_PUBLIC_IP'] || true
    aws.elastic_ip                = ENV['AWS_ELASTIC_IP'] || false
    aws.subnet_id                 = ENV['AWS_SUBNET_ID']
    override.vm.box               = ENV['AWS_VM_BOX'] || 'dummy'
    override.vm.box_url           = ENV['AWS_VM_BOX_URL'] || 'https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box'
    override.ssh.username         = ENV['AWS_SSH_USERNAME'] || 'centos'
    override.ssh.private_key_path = ENV['AWS_SSH_PRIVATE_KEY_PATH'] || '~/.ssh/id_rsa'
    override.ssh.insert_key       = ENV['AWS_SSH_INSERT_KEY'] || true
  end


  # Provisionning OpenIO SDS
  config.vm.provision "shell", inline:  <<-SHELL
    if [ -z "#{openio_release}" ]; then
      /usr/bin/yum -y install wget
      release=$(/bin/wget #{openio_mirror}/latest -q -O -)
    else
      release="#{openio_release}"
    fi
    /usr/bin/yum -y install #{openio_mirror}/\$release/el/openio-sds-release-\$release-1.el.noarch.rpm #{add_repo}
    /usr/bin/yum -y install puppet-openio-sds-profile-vagrant
    /usr/share/puppet/modules/openiosds/profiles/install.sh #{PROFILE} #{openio_sds_ipaddr}
    /usr/bin/yum -y install python-oiopy
    echo "OIO_NS=OPENIO
OIO_ACCOUNT=DEFAULT
export OIO_NS OIO_ACCOUNT" \
    >~openio/openiorc_default
  SHELL

end
